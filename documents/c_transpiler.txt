TRANSPILING MANGLANG TO C
* EvaluatedDict
  - Are like struct in C.
  - Require member lookup @ <-> .
* Dict in evaluation
  - Require symbol lookup in current scope or parent.
  - Require while loops.
  - Are like scopes within functions in C.
* Closures / nested functions.
  - Are not in C, but in Gnu C and C++.
  - Would goto be an option?
* Goto-option
  - Main is entry point.
  - Define all symbols used in manglang within the scope of main.
  - Define all functions used in manglang using goto and labels inside main.
  - Define structs that are implicitly used in manglang as structs above main.
* Serialize at the end somehow
  - Build a parallel serialization-object while evaluating,
    that is used to serialize at the end.


EXAMPLE - single dict

// Manglang
{a=1 b=a}

// c
struct S_a_b {
  Expression a;
  Expression b;
};
int main() {
  Expression a = makeNumber(1);
  Expression b = a;
  print(serialize((S_a_b){a, b}));
}

EXAMPLE - nested dicts

// Manglang
{a=1 b={c=a}}

// C
struct S_c {
  Expression c;
};
struct S_a_b {
  Expression a;
  Expression b;
};
int main() {
  Expression a = makeNumber(1);
  {
    Expression c = a;
  }
  Expression b = makeS_c((S_c){c});
  print(serialize(makeS_a_b((S_a_b){a, b})));
}

EXAMPLE - while
// Manglang
{s=0 i=2 while i s += i end}

// C
struct S_s_i {
  Expression s;
  Expression i;
};
int main(){
  Expression s = makeNumber(0);
  Expression i = makeNumber(2);
  while (makeBoolean(i)) {
    increment(s, i);
  }
  print(serialize((S_s_i){s, i}));
}

EXAMPLE - tuple
// Manglang
(1 2)

// C
int main() {
  printT0((T2){1, 2});
}

EXAMPLE - function
// Manglang
{x=1 f=in x out mul!(x x)}
struct S0 {
  int x;
  void* f(void*);
};
struct T0 {
  void* data0;
  void* data1;
};
void* F0(void* x) {
    return mul((T0){x, x});
}
void printS0(S0*);
int main() {
  S0 s0;
  so.x = 1;
  s0.f = F0;
  printS0(&s0);
}

EXAMPLE - function closure
// Manglang
{x=1 f=in y out mul!(x y) z=f!3}
struct S_x_f_z {
  Expression x;
  Expression f;
  Expression z;
};
void serializeS_x_f_z(S0);
int main() {
  Expression x = makeNumber(1);
  Expression f_transform(Expression y) {
    return mul((T2){x, y});
  };
  Expression f = makeFunction(f_transform);
  Expression z = applyFunction(f, addNumber(3));
  print(serializeS_x_f_z((S_x_f_z){x,f,z}));
}

