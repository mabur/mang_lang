GRAMMAR

digits = at_least_one_of(...)
symbol_prefix = at_least_one_of(...)
symbol_postfix = at_least_one_of(...) or zero?
symbol = symbol_prefix, symbol_postfix
decimals = dot, digits
number_prefix = at_most_one_of(+, -)
number_postfix = at_most_one_of(decimals)
number = number_prefix, digits, number_postfix
string_body = at_least_one_of(...) or zero?
string = ", string_body, "


TOKENS

NUMBER = "[+-]?([0-9]+[.])?[0-9]+"
PARENTHESIS_BEGIN = "\("
PARENTHESIS_END = "\)"
BRACKET_BEGIN = "\["
BRACKET_END = "\]"
SCOPE_BEGIN = "\{"
SCOPE_END = "\}"
EQUAL = "="
COMMA = ","
DOT = "\."
IF = "if "
THEN = "then "
ELSE = "else "
IMPORT = "import\("
ALL = "all "  # TODO: rename to "each"?
FOR = "for "
IN = "in "
SYMBOL = "[a-z_]\\w*"
STRING = "\"[\w\s]*\""
WHITE_SPACE = " "
NEW_LINES = "\n"


EXPRESSIONS

ParsePattern(_parse_number, [TokenType.NUMBER]),
ParsePattern(_parse_string, [TokenType.STRING]),
ParsePattern(_parse_conditional, [TokenType.IF]),
ParsePattern(_parse_tuple_comprehension, [TokenType.ALL]),
ParsePattern(_parse_import, [TokenType.IMPORT]),
ParsePattern(_parse_function_definition, [TokenType.SYMBOL, TokenType.PARENTHESIS_BEGIN, TokenType.SYMBOL, TokenType.PARENTHESIS_END, TokenType.EQUAL]),
ParsePattern(_parse_function_call, [TokenType.SYMBOL, TokenType.PARENTHESIS_BEGIN]),
ParsePattern(_parse_indexing, [TokenType.SYMBOL, TokenType.BRACKET_BEGIN]),
ParsePattern(_parse_definition_lookup, [TokenType.SYMBOL, TokenType.DOT]),
ParsePattern(_parse_variable_definition, [TokenType.SYMBOL, TokenType.EQUAL]),
ParsePattern(_parse_reference, [TokenType.SYMBOL]),
ParsePattern(_parse_tuple, [TokenType.PARENTHESIS_BEGIN]),
ParsePattern(_parse_scope, [TokenType.SCOPE_BEGIN])]
