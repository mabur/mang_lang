TYPE SYSTEM
* Types & Prototypes
* Maybe types should not be re-evaluated for every function call?
  - Could store evaluted types if we have EvaluatedFunction structs.
    - So EvaluatedFunction sets both environment and types of arguments.
* Sort out sub-type relation and consistent relation.
  - TypedExpression and function arguments are of on the form SuperType:SubType
  - a subtype can be used where the supertype is expected.
  - is & if alternatives should be consistent/equivalent.
    - Currently use else as base.
  - Subtype hierarchy or graph:
    - ANY
      - Character
      - Homogeneous & dynamic containers
        - Concept: take, drop, --, boolean
          - Names: InStream (bra), Sender (bra?), Reader (bra?), Source, Consumable, Provider, Producer, Publisher, InputIterator, Iterable.
          - Container
          - Text file input
          - Terminal input
          - Random number generation
          - Mouse input
          - Keyboard input
          - Concurrent input channel
        - Concept: put, +=
          - Names: OutStream (bra), Receiver (bra), Writer (bra?), Target, Destination, Sink,
                   Accumulator, Aggregator, Consumer, Gatherer, Collector, Subscriber, OutputIterator.
          - Container
          - Text file output
          - Terminal output
          - TUI output
          - Concurrent output channel
          - Pixel output?
            - How to make it efficient for real-time 2d games and images?
            - Might need an array/range/slice type.
            - Could also hide it behind a built-in sprite abstraction. Good enough for 2D.
        - Concept: take, drop, put, clear.
          - Name: Fixed type Container?
          - Boolean
          - Number
          - String
        - Concept: take, drop, put, clear.
          - Name: Parametric Container?
          - Generic Option/Optional/Maybe, Option[]
            - Concrete options, Option[...]
          - Generic stack, []
            - Concrete stacks, [...]
          - Generic table, Table[]
            - Concrete tables, Table[...]
      - Could have "objects" that receive messages to represent e.g. a graphical screen with messages like:
        - put!((x y r g b) screen)
        - put!((fill _ _  r g b) screen)
        - But for screens an array is probably a simpler abstraction
        - put!((x y (r g b)) screen)
      - Inhomogenouse & static containers / data structures
        - Concrete dictionaries (specifies the sufficient members)
        - Concrete tuples (specifies the sufficient members)
* How to add and check type annotation for:
  - never?
  - items of generic containers
  - input and output type of a function, for map
  - optionals can be container instead of sum-type
  - concepts:
    - concepts like sender & receiver
    - concepts like Container, which is a sum-type of stack,string,table,number, boolean.
      - Could introduce a special type CONTAINER, similarly to EMPTY_STACK, and define equal accordingly.
    - Concepts like Functions, which is a sum type of function, function_tuple, function_dictionary, function_built_in.
      - Easy as long as we don't care about sub-concepts.
* Rename serialized types from NUMBER to Number.
* Dictionary types:
  - aoc_22_07
* Run-time polymorphism/dispatch:
  - How to solve aoc_22_13
    if type checking would enforce homogeneous stacks?
  - Add version of "is" that checks that the type is equal
    instead of the value. "is_type_of"
  - Isinstance
  - Sum-type/choice-type
  - Run-time-dispatch/polymorphism/interfaces (bra)
    - Add "using" for dictionaries
  - dynamic keyword
* Oding keyword "using" for unpacking dictionary into dictionary.
{
  size = {width=320 height=240}
  point = {x=10 y=20}
  rect = {using size using point}

  using std

  max_element = in list out {value = ... index = ...}
  result = max_element!(3 7 6)
  value = value@result
  index = index@result
  // Alternative
  using max_element!(3 7 6)
}
{
  size = {width=320 height=240}
  point = {x=10 y=20}
  rect = {unpack size unpack point}
  
  unpack std

  max_element = in list out {value = ... index = ...}
  result = max_element!(3 7 6)
  value = value@result
  index = index@result
  // Alternative
  unpack max_element!(3 7 6)
}


STANDARD LIBRARY
* Make algorithms more similar to STL:
  - Let them take the "init container".
  - Add array containers/iterators that put new items in-place, similar to tables.
    - put!((index value) array)
    - put!((x y value) image) ?
    - get!(index array default_value)
  - Then the same base algorithm can be used for both in-place (transform) and new allocation (map).
* all_of, any_of, none_of
* Interface for containers:
  - Look at all usages of clear in standard library, and consider sending in the target container/receiver, like STL.
  - Define and & or on tuples/pairs instead of stacks.
  - add empty? is_empty? function for containers?
    - Makes even more sense after for-loops are added.
    - nonempty, is_not_empty? is_populated, inhabited
    - empty = in container out is container
        [] then true
        "" then true
        <> then true
        0 then true
        else false
  - Compare interface for iterating over containers and numbers:
    - take!container, 1
    - drop!container, dec!number, --
    - put!(item container), add!(1 number), inc!number, +=
    - empty, 0
    - clear!container, [], "", <>, 0
    - put!(take!x drop!x) == x, add!(1 dec!x) == x
    - ett positivt heltal är ekvivalent med en stack, där bara längden på stacken spelar roll, men inte innehållet.
    - sub!(a b) == drop_n!(count!b a)
    - mul!(a b) == cartesian product?
    - div?
    - inc?
    - reverse!number == number
    - put_each!(a b) == add!(a b)
    - make_number!container == count!container
    - merge_stack!(a b) == sum_stack!(a b)
    - map_number!(f number) == sum_N f(n)
    - sum![numbers] == merge_stacks![stacks]
    - product![numbers] == cartesian product?
  - get vs indexing
    - Replace get!(key table default_value) for tables with container!key?
    - O(N) for stack and string
    - O(1) for table
  - count!containers
    - O(N) for stack and string
    - O(1) for table
  - Built-in functions for checking if name is in dict: has?(name dictionary) contains? inside?
    - O(N) for stack and string
    - O(1) for table
  - add higher_order function that takes a unary function and constructs a new binary function
    that applies identity to first argument, so that it can be used for table pairs of (key value).
  - add higher_order function that takes a unary predicate and constructs a new binary predicate
    that ignores the first argument, so that it can be used for table pairs of (key value).
  - Compare algorithms with those in libraries like: https://github.com/samber/lo
* Add unordered/reversed versions of algorithms like map, clear_if, replace_if etc.
  - Let unordered be default since it makes sense for both stacks and tables.
  - clear_if_ordered, map_ordered.
* Functions:
  - Math: trigonometry
  - Character: string_from_number, number_from_string


LANGUAGE SYNTAX & SEMANTICS
* Generic container interface. Make operations like inc,dec,drop,put,+=,--,get0,take consistent with serialization.
  - What do we refer to as first and last of a stack?
  - Should "take" give first or last?
  - Should we index from front or back?
  - Compare Peano axioms with generic programming and iterators.
    - Natural to have predecessor instead of successor for containers, since we can drop items without knowing what item we drop, but we cannot add an item without knowing what item we add.
    - Define generic programming axioms for containers using predecessor!
    - https://en.wikipedia.org/wiki/List_(abstract_data_type)
* Indexing
  - Allow both container!index and index!container. Second version is good for
    - multiple indexing of images x!y!image.
    - xs = map!(0, points)
    - Remove need for get0, ...
    - Could support literal indexing for 0-9: 0!container, 9!container, to simplify parsing rules.
  - Could also have index@container and x@y@image.
  - What about tables? When to return key-value-tuple and when to just return value?
    - get0,..., can already be used for tables. Mirror that behaviour.
    - table!index (make constant or logN?)
    - get!(key table default_value) (logN)
* Control structures for dictionaries.
  - Add syntactic sugar for numbers besides += like -=.
    - Use -= to subtract from number?
    - Use -= to remove a specific item from a table?
    - Use -= to drop N items from a container?
  - Add optionals and treat them like containers.
      x = optional[]
      x += 5
      flag = no
      for x
        flag = yes
      end
    put, clear, take, drop, +=, --
  - Syntax for homogeneous dynamic containers: stacks [], tables <(k v)>, optionals?
    - [], stack[]
    - <>, table[]
    - ?, optional[], option[] maybe[]
  - Empty tuple () for MISSING, NULL. Alternatively option[]
  - Add short-circuit "and" "or" to while statement.
* kebab-case
  - Numbers and -inf constant.
* Equality for dictionaries?
* Add asserts/value-checks/predicates with similar syntax to type-checks:
  - type-check:value-check;expression
  - List:is_populated;expression
  - List:expression
  - is_populated;expression
  - expression

SYSTEM IMPLEMENTATION
* Optimization:
  - Raytracer 32x20: 1.8,1.9,2.0,2.2,2.3s -> 1.0s -> 0.9s
  - Raytracer 64x40: 3.5s -> 3.4s -> 2.6,2.7s -> 2.1-2.2 -> 2.0
* Packing Expressions:
  - Pack index for expressions that only wrap a single other Expression directly in the parent expression, to avoid one indirection.
* Add arrays
* Improve EvaluatedDictionary.
  - EvaluatedDictionary is used both during evaluation and after evaluation.
  - During evaluation the "values" change but not the "keys" of the "definitions".
  - EvaluatedDictionary & Dictionary do need the same Definition.
  - For the "definitions" inside EvaluatedDictionary
    we do not need to explicitly store the local index.
  - Example: struct EvaluatedDictionary {
      Expression environment;
      size_t name_first; // Index to constant names/keys. Could possible be shared across instances.
      size_t name_last;  // Index to constant names/keys. Could possible be shared across instances.
      size_t dictionary_expression_first;  // Index to values/expression that can change during the evaluation.
      size_t dictionary_expression_last;   // Index to values/expression that can change during the evaluation.
    };
* Static evaluation of names:
  - Crafting Interpreters says that it is common to resolve names either during parsing or as separate pass.
    - They recommend evaluating and storing the number of steps to reach the right ancestor.
  - Probably better to have separate pass after parsing that does:
    - Name resolution for dictionary-definitions.
    - Loop resolution for dictionaries.
    - Name resolution in general.
    - Name for this pass: (name) bind/binding, (name) resolve/resolution, semantic analysis.
  - Could be easy to start by not having separate pass but compute it the first time that we look up in evaluation,
    and then set the steps to parent. Then if the steps are set we can use that the next time we do lookup.
  - Links:
      https://craftinginterpreters.com/resolving-and-binding.html
      https://news.ycombinator.com/item?id=15218533
  - Current O(parents * members)
  - In practice I guess the slow parts are:
    - Jumping around in memory
    - The standard library is a big dictionary, most other dictionaries are small.
  - All names are internalized into ints.
  - Would it make sense to split the single object pool for dictionaries into different pools for dictionaries with different members?
    - Get a bit of automated data-oriented design at "compile-time".
  - Could optimize special case for built-ins and standard library.
  - 1 int for number of steps to parent and another int for index in that dictionary. O(parents)
  - or just a single int for index in that dictionary, and then visit parents until it is found. O(parents)
  - How to deal with dictionaries where names are defined in different order?
    - Could define index-order alphabetically or using some hash-function.
  - How to deal with dictionaries that are superset of interface?
    - Could maybe rely on some hash-function?
    - Could stop supporting typed generic dictionaries and require dynamic ANY for them.
    - Generic dictionaries is so far also the only thing that is causing the supertype:subtype relation to not be symmetric,
      which could be a sign of complexity.
    - Allow private fields that are only present during the dictionary evaluation phase,
      but removed after the dictionary has been evaluated.
      publix x = 1
      _x = 1
  - Store a name-to-index hash-map for each dictionary type.
  - Use a bitset to store what names are in a dictionary.
    - Compare bitset vs sorted array of indices.
  - Add a new expression EvaluatedName
    - Store both name and also index and perhaps steps to parent.
    - Compute it during type-evaluation phase.
    - Requires that dictionaries of the same type has members indexable the same way.
* Nodes & Passes:
  - Parse
    - serialize
    - evaluate_types
      - serialize_types
    - evaluate
      - serialize
* Fewer heap allocations and more stack allocations.
  - Examples:
    - std::string in serialize.
    - std::vector for alternatives in Conditional and IsExpression.
    - std::vector in input_names for FunctionDictionary and FunctionTuple.
    - std::vector in Tuple and EvaluatedTuple.
    - std::vector in Dictionary and EvaluatedDictionary.
    - std::vector in Table.
    - std::map in EvaluatedTable and EvaluatedTableView.
  - Could implement on stack as fixed sized arrays like, possible many different like: Tuple4, Tuple8, Tuple16.
  - Could implement stacks and dictionaries as two indices/pointers to its first and last elements.
    - Maybe store all dictionary-statements in the same std::vector for faster dictionary iteration.
  - "Hash consing" for (booleans), characters and small numbers.
  - Adrian Sampson, Department of Computer Science Cornell University
    - Flattening ASTs (and Other Compiler Data Structures)- 
    - https://www.cs.cornell.edu/~asampson/blog/flattening.html
* Storing all expression fields as SOA instead of AOS?
* James Gosling: "jvm bytecode as syntax tree in reverse polish notation".
  - Think of input and output of bytecode interpreter as flattened and efficient tree representation.
  - Compare iterators over an array.
* https://www.reddit.com/r/ProgrammingLanguages/comments/ugysu5/functional_language_for_data_descriptionconfig/
* Jonathan Blow - Writing a Book - https://www.youtube.com/watch?v=ydg9ZmQL2II
* Data & code in multiple files:
  - Importing source files.
  - Reading text file. Interpret text file as manglang source, but surround it with "" to make a string.

* Ranges. Store both stacks and tables as ranges.
  - Is it safe for stacks and tables, as long as we only do insertion but not erasure of the shared storage?
  - Or at least as long as we do not mutate while iterating.
  - https://stackoverflow.com/questions/6438086/iterator-invalidation-rules-for-c-containers
* Persistent hash map like in Clojure. Array mapped hash tries (Bagwell: non-persistent, Rich Hickey: persistent).
  - HAMT - Hash Array Mapped Tries.
  - When making copies, it creates new nodes for the path from the root to the leaf, and shares the rest.
* Nils says that quasiquote and unquote and quote in racket could be a nice fit for manglang and vice versa, for macros and meta-programming.
  - Could add two operations and keywords: evaluate and anti-evaluate/devaluate/integrate/pass/ignore/skip/preserve
  - Let them have the semantics:
    evaluate preserve expression -> expression
  - "Evaluate" function as general solution that can be used to convert strings to names and general code, e.g. for parsing json.
* Advent of Code needs
  - Memory
    - 64 bit
    - Use less memory
* Memory management.
* Split structs for evaluated and non-evaluated for:
  - Dictionaries (done)
  - Lists (done)
  - Tables (done)
  - Functions (todo)
    - Sets environment and taret types for input.
* Fix FunctionDictionary closure
* Rename to Mangelang?
* Can expression trees be implemented more like values and less like pointers? More like lisp?
https://www.reddit.com/r/ProgrammingLanguages/comments/mdtdxq/unifying_objects_and_scopes/
* Implement everything needed to convert between json and manglang in manglang.
  - Dynamic creation of dictionaries.
* Subsets of manglang:
  - Data: number, character, dictionaries, list, string
  - Minimal computation: number, dictionaries, references, child references, function application, function definition

* Documentation and specification. Describe the steps and rules more formally, in metalanguage or graphical.
  - Parsing: manglang code -> tree. (EBNF, railroad diagrams)
  - Serializing: tree -> manglang code. (EBNF?, same as above?)
  - Evaluation: tree -> tree. (graphical nodes? algebra)

ERROR HANDLING
* Tests for syntax error and run-time error.
  - Testing book suggested to add information to Exceptions to make them easier to test:
    e.message (free form message that is shown to user but not tested)
    e.code_range
    e.error_type (parsing, static type error, dynamic type error, out of range, ...)
    e.expected_type
    e.actual_type
* Add error messages as comments in source code.
  - Add (line) comments
  - // PARSE ERROR   ^ expected closing brace }
  - Remove old error message comments when there are no error messages.
* Output logs
* Make "1 2" throw a parse error
* c++ add systematic error messages when parsing fails
  - Print all sub-expressions that it parsed
* Better error messages
* Article: "Concepts error messages for humans"

TOOLS:
* Command line interface for reading source from file and piping it to interpretor
* Web interpreter using wasm.
* Code formatting
  - https://yorickpeterse.com/articles/how-to-write-a-code-formatter/
  - Indentaiton and line breaks.
  - Colors and syntax high-lighting.
    - Textmate grammars seem to be much easier than LSP or Treesitter.
    - Textmate grammars are supported by for example Sublime and Vscode.
  - Implement tool that takes a source file and outputs an html.
  - Homepage
  - Start by describing rules for wrapping different expressions.
    - Expressions with arbitrary number of sub-expressions:
      - Tuples, Dictionaries, Stacks, Tables, If, Is, FunctionTuple, FunctionDictionary.
        - 2 modes: single line or wrap with each item on its own line.
        - serialize(int indentation_level, int column_wrap_limit, ...)


EXAMPLE PROGRAMS:
* Raytracing
* Parsing Json
* Parsing Manglang
* Advent of code


SIMILAR LANGUAGES
* Lisp family: https://en.wikipedia.org/wiki/Lisp_(programming_language)
* Json: https://www.json.org/

* Nickel https://nickel-lang.org/
* Nix https://nixos.wiki/wiki/Overview_of_the_Nix_Language
* HCL / Terraform language https://github.com/hashicorp/hcl https://www.terraform.io/language
* Jsonnet https://jsonnet.org/
* Dhall https://dhall-lang.org/
* CUE https://cuelang.org/
* GCL https://gcl.readthedocs.io/

* L1 https://mlajtos.github.io/L1/
* Sprylang http://sprylang.se/manual.html#composites

* (Cognate read) https://github.com/cognate-lang/cognate

* (Yaml)
* (TOML) https://github.com/toml-lang/toml
* (Lua) https://www.lua.org/
* (Pico) http://pico.vub.ac.be/
* (Azor) https://github.com/cstuartroe/azor


WEBPAGE
https://www.passerine.io/
https://gleam.run/
https://tabloid.vercel.app/
https://docs.scala-lang.org/tour/tour-of-scala.html
https://www.pyret.org/
https://nim-lang.org/
https://github.com/tuqqu/oxide-lang
https://typst.app/docs/reference/text/strong/


Languages supported by Github:
https://github.com/github/linguist/blob/master/lib/linguist/languages.yml
Candidates:
HiveQL


LEVELS
1. Data
  - Atoms
      - numbers
      - characters
  - Containers
    - strings
    - lists
    - dictionaries
2. Data References
  - reference (substitution)
  - child reference (substitution)
3. Control flow (turing complete)
  - Conditional if (substitution)
  - Iterative dictionary, while in dictionaries and updating of symbols (substitution)
4. Function application (substitution)
5. Function Definition
  - Function
  - Function of list
  - Function of dictionary

When evaluating level 1-4 the result is level 1.
When evaluating level 5 the result is level 5.

Have different levels per file, so that the functions can be in one file
and then the result file can import them and evaluate its result to level 1.


SUB LANGUAGES
* Json-like: level 1
* Yaml-like: level 2
* Turing complete: level 3
* Non-turing complete calculator: level 1,2,4
* Full: level 5
* Minimal computation: numbers & dictionaries & References & Control flow


        PRIMITIVE DATA
╔══ NUMBERS ══╔═ CHARACTERS═╗
║ 1           ║ 'a'         ║
║ 1.0         ║ 'b'         ║
║ -3.34       ║ 'c'         ║
╚═════════════╚═════════════╝

╔═ DICTIONARIES ═════════╔═ STACKS══════════╔═ STRINGS ══════╗
║ {NAME=EXPRESSION ...}  ║ (EXPRESSION ...) ║ "CHARACTER..." ║
║                        ║                  ║                ║
║ {}                     ║ ()               ║ ""             ║
║                        ║                  ║                ║
║ {width=320 height=240} ║ (1 2 3)          ║ "abc"          ║
║                        ║                  ║                ║
║ {                      ║ (                ║ "Mang Lang"    ║
║     x = 1              ║     1            ║                ║
║     y = 2              ║     2            ║                ║
║     z = 3              ║     3            ║                ║
║ }                      ║ )                ║                ║
╚════════════════════════╚══════════════════╚════════════════╝

╔═ REFERENCES ═══════╔═ CHILD REFERENCES ═════════════════╗
║ NAME               ║ NAME@EXPRESSION                    ║
║                    ║                                    ║
║ {                  ║ {                                  ║
║     x = 1          ║     rectangle = {width=1 height=2} ║
║     y = x          ║     w = width@rectangle            ║
║     z = {a=1 b=y}  ║     coordinate = z@{x=1 y=2 z=3}   ║
║ }                  ║ }                                  ║
╚════════════════════╚════════════════════════════════════╝

╔══ FUNCTION APPLICATION ════════════════════╗
║ NAME!EXPRESSION                            ║
║                                            ║
║ {                                          ║
║     list = (1 2 3)                         ║
║     num_elements = count!list              ║
║     longer_list = put!(0 list)             ║
║     backwards = reverse!"Mang Lang"        ║
║     area = get_area!{width=320 height=240} ║
║ }                                          ║
╚════════════════════════════════════════════╝

╔══ CONDITIONALS ═══════════════════════════════╔═ ITERATIVE DICTIONARIES ═══════════════════════════════╗
║ if EXPRESSION then EXPRESSION else EXPRESSION ║ {NAME=EXPRESSION while EXPRESSION NAME=EXPRESSION end} ║
║                                               ║                                                        ║
║ {                                             ║ {                                                      ║
║     is_rich = 0                               ║     sum = 0                                            ║
║     money = if is_rich then 1000000 else 1    ║     i = 10                                             ║
║     list = ()                                 ║     while i                                            ║
║     is_list_empty = if list then 1 else 0     ║         i = dec!i                                      ║
║ }                                             ║         sum = add!(sum i)                              ║
║                                               ║     end                                                ║
║                                               ║ }                                                      ║
╚═══════════════════════════════════════════════╚════════════════════════════════════════════════════════╝

╔══ FUNCTIONS ══════════════════════════════════════╔══ FUNCTIONS OF STACKS ══════════╔══ FUNCTIONS OF DICTIONARIES ═══════════════╗
║ in NAME out EXPRESSION                            ║ in (NAME ...) out EXPRESSION    ║ in {NAME ...} out EXPRESSION               ║
║                                                   ║                                 ║                                            ║
║ {                                                 ║                                 ║                                            ║
║     square = in x out mul!(x x)                   ║                                 ║                                            ║
║     nine = square 3                               ║ {                               ║                                            ║
║     square_norm2 = in vec out                     ║     square_norm2 = in (x y) out ║                                            ║
║         add!(square!vec!0, square!vec!1)          ║         add!(square!x square!y) ║                                            ║
║     n = square_norm2!(3 4)                        ║     n = square_norm2!(3 4)      ║ {                                          ║
║     get_area = in shape out                       ║     conj = in (re im) out       ║     get_area = in {width height} out       ║
║         mul!(width@shape height@shape)            ║         (re neg!im)             ║         mul!(width height)                 ║
║     area = get_area!{width=320 height=240}        ║     c = conj!(0 1)              ║     area = get_area!{width=320 height=240} ║
║ }                                                 ║ }                               ║ }                                          ║
╚═══════════════════════════════════════════════════╚═════════════════════════════════╚════════════════════════════════════════════╝
