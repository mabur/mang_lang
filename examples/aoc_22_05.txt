result@{
    input =
"    [D]    
[N] [C]    
[Z] [M] [P]
 1   2   3 

move 1 from 2 to 1
move 3 from 1 to 3
move 2 from 2 to 1
move 1 from 1 to 2"
    lines = split!(newline input)
    groups = split!("" lines)
    stacks = groups!0
    movements = groups!1
    stacks = transpose!stacks
    is_not_upper_case = in c out not?is_upper?c
    is_empty = in container out not?container
    strip_characters = in row out clear_if!(is_not_upper_case row)
    stacks = map_stack!(strip_characters stacks)
    stacks = clear_if!(is_empty stacks)
    stacks = make_table!enumerate!stacks
    for movement in movements
        words = split!(' ' movement)
        n = parse_natural_number!words!1
        source = dec!parse_natural_number!words!3
        target = dec!parse_natural_number!words!5
        while n
            source_stack = get!(source stacks [])
            item = take!source_stack
            source_stack = drop!source_stack
            target_stack = get!(target stacks [])
            target_stack += item
            stacks += (source source_stack)
            stacks += (target target_stack)
            n = dec!n        
        end
    end
    result = map_string!(first get_values!stacks)
}
