result@{
    input =
"498,4 -> 498,6 -> 496,6
503,4 -> 502,4 -> 502,9 -> 494,9"
    parse_point = in string out
        map_stack!(parse_natural_number split!(',' string))
    parse_path = in line out
        map_stack!(parse_point split!('-' clear_item!('>' clear_item!(' ' line)))) 
    lines = split!(newline input)
    paths = map_stack!(parse_path lines)
    
    get_direction = in (source target) out direction@{
        delta = subv!(target source)
        dx = delta!0
        dy = delta!1
        direction = [
            if less?(dx 0) then -1 less?(0 dx) then 1 else 0
            if less?(dy 0) then -1 less?(0 dy) then 1 else 0
        ] 
    }
    
    filled = <>
    for path in paths
        while drop!path
            source = path!0
            target = path!1
            delta = get_direction!(source target)
            point = source
            while unequal?(point target)
                filled += (point yes)
                point = addv!(point delta)
            end
            filled += (point yes)
            path = drop!path
        end
    end
    
    maxy = max_item!map_stack!(get0 get_keys!filled)
    
    continue_spawning = yes
    n = 0
    while continue_spawning
        point = [500 0]
        continue_moving = yes
        while and?[continue_moving less?(point!1 maxy)]
            targets = [
                addv!(point [0 1])
                addv!(point [-1 1])
                addv!(point [+1 1])
            ]
            is_target_filled = in target out get!(target filled no) 
            targets = drop_while!(is_target_filled targets)
            continue_moving = if targets then yes else no
            point = if continue_moving then take!targets else point
            filled = if continue_moving then filled else put!((point yes) filled)
        end
        continue_spawning = less?(point!1 maxy)
        n = inc!n
    end
    
    result = dec!n
}
