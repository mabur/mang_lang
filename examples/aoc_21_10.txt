score@{
    strings = [
        "[({(<(())[]>[[{[]{<()<>>"
        "[(()[<>])]({[<{<<[]>>("
        "{([(<{}[<>[]}>{[]{[(<()>"
        "(((({<>}<{<{<>}{[]{[]{}"
        "[[<[([]))<([[{}[[()]]]"
        "[{[{({}]{}}([{[{{{}}([]"
        "{<[[]]>}<{[{[{[]{()[[[]"
        "[<(<(<(<{}))><([]([]()"
        "<{([([[(<>()){}]>(<<{{"
        "<{([{{}}[<[[[<>{}]]]>[]]"
    ]
    get_closer = in c out is c 
        '(' then ')'
        '{' then '}'
        '[' then ']'
        '<' then '>'
        else '.'
    score_string = in string out score@result@{
        result = {
            score = 0
            open = put!(take!string "")
        }
        string = drop!string
        while all?[not?score@result open@result string]
            c = take!string
            string = drop!string
            open = open@result
            result = is c
                get_closer!take!open then {open = drop!open score = 0}
                '{' then {open = put!(c open) score = 0}
                '(' then {open = put!(c open) score = 0}
                '[' then {open = put!(c open) score = 0}
                '<' then {open = put!(c open) score = 0}
                ')' then {open = "" score = 3}
                ']' then {open = "" score = 57}
                '}' then {open = "" score = 1197}
                '>' then {open = "" score = 25137}
                else {open = "" score = 1000000000}
        end
    }
    score = sum!map_stack!(score_string strings)
}
