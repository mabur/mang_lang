result@{
    commands = (
        "forward 5"
        "down 5"
        "forward 8"
        "up 3"
        "down 8"
        "forward 2"
    )
    move = in (command position) out new_position@{
        x = first!position
        y = second!position
        steps = parse_digit!top@reverse!command
        new_position = is top@command
            \u then (x sub!(y steps))
            \d then (x add!(y steps))
            \f then (add!(x steps) y)
            else (inf inf)
    }
    start = (0 0)
    position = fold!(move commands start)
    result = mul!position
}
