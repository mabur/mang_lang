result@{
    input = "$ cd /
$ ls
dir a
14848514 b.txt
8504156 c.dat
dir d
$ cd a
$ ls
dir e
29116 f
2557 g
62596 h.lst
$ cd e
$ ls
584 i
$ cd ..
$ cd ..
$ cd d
$ ls
4060174 j
8033020 d.log
5626152 d.ext
7214296 k"
    
    parse_command_string = in command_string out
        clear_item!("" split!(newline drop!command_string))
    command_strings = drop!split!('$' input)
    commands = map_stack!(parse_command_string command_strings)

    state = {
        current_path = []
        path_and_size = <>
    }
    handle_cd = in (command state) out {
        current_path = current_path@state
        path_and_size = path_and_size@state
        new_directory = drop_many!(3 take!command)
        current_path = is new_directory
            ".." then drop!current_path
            else put!(new_directory current_path)
    }
    handle_ls = in (command state) out {
        current_path = current_path@state
        path_and_size = path_and_size@state
        command = drop!command
        while command
            parts = split!(' ' take!command)
            size = first!parts
            file = second!parts
            file_path = put!(file current_path)
            path_and_size = is take!size
                'd' then path_and_size
                else put!((file_path parse_natural_number!size) path_and_size)
            command = drop!command
        end
    }
    handle_command = in (command state) out is take!take!command
        'c' then handle_cd!(command state)
        'l' then handle_ls!(command state)
        else {}
    state = fold!(handle_command commands state)
        
    get_first = in (a b) out a
    get_second = in (a b) out b
   
    update_directory_sizes = in (path_and_size directory_sizes) out directory_sizes@{
        path = get_first!path_and_size
        size = get_second!path_and_size
        path = drop!path
        while path
            directory_size = get!(path directory_sizes 0)
            directory_size = add!(directory_size size)
            directory_sizes = put!((path directory_size) directory_sizes)
            path = drop!path
        end
    }
    directory_sizes = fold!(update_directory_sizes path_and_size@state <>)
    sizes = get_values!directory_sizes
    is_big_size = in size out less?(100000 size)
    result = sum!clear_if!(is_big_size sizes)
}
