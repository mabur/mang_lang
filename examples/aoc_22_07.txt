result@{
    input = "$ cd /
$ ls
dir a
14848514 b.txt
8504156 c.dat
dir d
$ cd a
$ ls
dir e
29116 f
2557 g
62596 h.lst
$ cd e
$ ls
584 i
$ cd ..
$ cd ..
$ cd d
$ ls
4060174 j
8033020 d.log
5626152 d.ext
7214296 k"

    Strings = [String]
    
    parse_command_string = in String:command_string out Strings :
        clear_item!("" split!(newline drop!command_string))
    command_strings = Strings : drop!split!('$' input)
    commands = map_stack!(parse_command_string command_strings)

    State = {
        current_path = Strings
        path_and_size = <(Strings Number)>
    }
    state = State:{
        current_path = []
        path_and_size = <>
    }
    handle_cd = in (Strings:command State:state) out State:{
        current_path = Strings : current_path@state
        path_and_size = path_and_size@state
        new_directory = String : drop_many!(3 take!command)
        current_path = Strings : is new_directory
            ".." then Strings:drop!current_path
            else put!(String:new_directory Strings:current_path)
    }
    handle_ls = in (Strings:command State:state) out State:{
        current_path = Strings : current_path@state
        path_and_size = path_and_size@state
        command = Strings : drop!command
        for item in command
            parts = split!(' ' item)
            size = String : parts!0
            file = String : parts!1
            file_path = Strings : put!(file current_path)
            path_and_size = is Character : take!size
                'd' then path_and_size
                else put!((Strings:file_path Number:parse_natural_number!size) path_and_size)
        end
    }
    handle_command = in (Strings:command State:state) out State:is take!take!command
        'c' then State:handle_cd!(command state)
        'l' then State:handle_ls!(command state)
        else State:state

    state = fold!(handle_command commands state)

    update_directory_sizes = in (path_and_size directory_sizes) out directory_sizes@{
        path = path_and_size!0
        size = path_and_size!1
        path = drop!path
        for path
            directory_size = get!(path directory_sizes 0)
            directory_size = add!(directory_size size)
            directory_sizes = put!((path directory_size) directory_sizes)
        end
    }
    directory_sizes = fold!(update_directory_sizes path_and_size@state <>)
    sizes = get_values!directory_sizes
    is_big_size = in size out less?(100000 size)
    result = sum!clear_if!(is_big_size sizes)
}
