result@{
    numbers = [
        "00100"
        "11110"
        "10110"
        "10111"
        "10101"
        "01111"
        "00111"
        "11100"
        "10000"
        "11001"
        "00010"
        "01010"
    ]
    NUM_BITS = count!take!numbers

    get_column = in index out
        map_stack!(
            in number out number!index
            numbers
        )
    count0 = in stack out
        count_item!('0' stack)
    count1 = in stack out
        count_item!('1' stack)
    pick_most_common_bit = in counts out
        if less?counts then 1 else 0
    pick_least_common_bit = in counts out
        if less?counts then 0 else 1

    dec_from_bin = in binary out sum!map_stack!(mul zip2!(binary [16 8 4 2 1]))

    columns = map_stack!(get_column range!NUM_BITS)
    counts0 = map_stack!(count0 columns)
    counts1 = map_stack!(count1 columns)
    gamma = map_stack!(pick_most_common_bit zip2!(counts0 counts1))
    epsilon = map_stack!(pick_least_common_bit zip2!(counts0 counts1))
    result = mul!(dec_from_bin!gamma dec_from_bin!epsilon)
}
