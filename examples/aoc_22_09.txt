result@{
    input = "R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2"
    
    head_movements = <
        'L':[-1 0]
        'R':[+1 0]
        'U':[0 +1]
        'D':[0 -1]
    >
    tail_movements = <
        [-1 +2]:[-1 +1]
        [+0 +2]:[+0 +1]
        [+1 +2]:[+1 +1]
        
        [-1 -2]:[-1 -1]
        [+0 -2]:[+0 -1]
        [+1 -2]:[+1 -1]
        
        [+2 -1]:[+1 -1]
        [+2 +0]:[+1 +0]
        [+2 +1]:[+1 +1]
        
        [-2 -1]:[-1 -1]
        [-2 +0]:[-1 +0]
        [-2 +1]:[-1 +1]
    >

    head = [0 0]
    tail = [0 0]
    
    heads = []    
    tails = []
    visited = <>
    
    heads = put!(head heads)
    tails = put!(tail tails)
    visited = put!((tail yes) visited)
    
    addv = in (a b) out map_stack!(add zip2!(a b))
    subv = in (a b) out map_stack!(sub zip2!(a b))
    
    lines = split!(newline input)
    while lines
        line = take!lines
        direction = first!line
        steps = parse_digit!third!line
        while steps
            head_movement = get!(direction head_movements [nan nan])
            head = addv!(head head_movement)
            offset = subv!(head tail)
            tail_movement = get!(offset tail_movements [0 0])
            tail = addv!(tail tail_movement)
            tails = put!(tail tails)
            heads = put!(head heads)
            visited = put!((tail yes) visited)
            steps = dec!steps
        end
        lines = drop!lines
    end
    result = {
        heads = reverse!heads
        tails = reverse!tails
    }
    result = count!visited
}
